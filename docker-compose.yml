name: ft_transcendence

# these are common to all containers
x-common: &common
  env_file:
    - .env
  restart: always
  networks:
    - transcendence_network
  init: true
  tty: true
  stdin_open: true

services:
  postgres:
    <<: *common
    image: "postgres:16"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

# we could change to redis latest. we are not doing inception anymore
  redis:
    <<: *common
    image: "redis:alpine"
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes  --save 60 1 --loglevel verbose
    healthcheck:
      test: ["CMD", "redis-cli", "ping"] 
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    <<: *common
    build: src/ft_transcendence_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  game:
    <<: *common
    build: src/ft_transcendence_backend/game
    command: python3 -m uvicorn pong_game:app --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  caddy:
    <<: *common
    build:
      context: ./src/
      dockerfile: caddy/Dockerfile
    ports:
      - "8081:80"  # Run Caddy on a different port for testing
      - "8444:443"  # Run Caddy on a different port for testing
    depends_on:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    <<: *common
    build:
      context: ./src/
      dockerfile: nginx/Dockerfile
    depends_on:
      - backend
    ports:
      - "8080:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src/nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
  
  grafana:
    <<: *common
    build: 
      context: ./src/grafana
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      # - GF_SECURITY_ADMIN_USER=admin
      # - GF_SECURITY_ADMIN_PASSWORD=...
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./src/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./src/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - redis
      - loki
      - tempo
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  loki:
    <<: *common
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: ["-config.file=/etc/loki/local-config.yml"]
    volumes:
      - ./src/grafana/config/loki-config.yml:/etc/loki/local-config.yml
      - ./src/grafana/config/loki_data:/tmp/loki 
    networks:
      - transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3100 || exit 1"]
      interval: 60s
      timeout: 660s
      retries: 5

  tempo:
    <<: *common
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./src/grafana/config/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    networks:
      - transcendence_network
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:3200/metrics || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

# No health check possible for the otel collector
  otel-collector:
    <<: *common
    image: otel/opentelemetry-collector-contrib:latest  # Using contrib version for Loki support
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./src/grafana/config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317"  # Changed from 4317 to avoid conflict
      - "4320:4318"  # Changed from 4318 to avoid conflict
    networks:
      - transcendence_network
    depends_on:
      - tempo
      - loki
     
  portainer:
    <<: *common
    build: src/portainer
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - portainer-data:/data
    depends_on:
      - nginx
    ports:
      - "9443:9443"
    healthcheck:
      test: ["CMD-SHELL", "curl -f -k https://localhost:9443 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  portainer-data:
  loki-data:

networks:
  transcendence_network:
    name: transcendence_network
    driver: bridge
